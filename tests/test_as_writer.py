"""
Unit tests for AUTOSTRUCTURE wrapper (ASWriter class).

Tests the functionality of generating AUTOSTRUCTURE input files (.dat format)
with NAMELIST syntax, including automatic conversion from atomkit Configuration objects.
"""

import pytest
from pathlib import Path
import tempfile

from atomkit import Configuration
from atomkit.autostructure import ASWriter


class TestASWriterBasics:
    """Test basic ASWriter functionality."""

    def test_initialization(self):
        """Test ASWriter initialization."""
        asw = ASWriter("test.dat")
        assert asw.filename == Path("test.dat")
        assert asw.lines == []
        assert asw.orbitals == []
        assert asw.configurations == []

    def test_context_manager(self):
        """Test context manager support."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".dat", delete=False) as f:
            temp_file = f.name

        try:
            with ASWriter(temp_file) as asw:
                asw.write_header("Test")
                asw.add_salgeb(CUP="LS", RAD="E1")
                asw.add_sminim(NZION=6)

            # File should be written after context exit
            content = Path(temp_file).read_text()
            assert "A.S. Test" in content
            assert "&SALGEB" in content
            assert "&SMINIM" in content
        finally:
            Path(temp_file).unlink()

    def test_manual_close(self):
        """Test manual file writing."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".dat", delete=False) as f:
            temp_file = f.name

        try:
            asw = ASWriter(temp_file)
            asw.write_header("Manual test")
            asw.add_salgeb(CUP="LS", RAD="E1")
            asw.close()

            content = Path(temp_file).read_text()
            assert "A.S. Manual test" in content
        finally:
            Path(temp_file).unlink()

    def test_get_content(self):
        """Test content retrieval without writing file."""
        asw = ASWriter("dummy.dat")
        asw.write_header("Content test")
        asw.add_salgeb(CUP="IC", RAD="E1")

        content = asw.get_content()
        assert "A.S. Content test" in content
        assert "&SALGEB CUP='IC' RAD='E1'" in content
        assert "&END" in content


class TestHeaderAndComments:
    """Test header and comment functionality."""

    def test_write_header(self):
        """Test header writing."""
        asw = ASWriter("test.dat")
        asw.write_header("Test calculation")

        assert len(asw.lines) == 2  # Header + auto-generated comment
        assert asw.lines[0] == "A.S. Test calculation"
        assert "Generated by atomkit" in asw.lines[1]

    def test_header_must_be_first(self):
        """Test that header must be first line."""
        asw = ASWriter("test.dat")
        asw.add_comment("Comment first")

        with pytest.raises(ValueError, match="Header must be written first"):
            asw.write_header("Too late")

    def test_add_comment(self):
        """Test comment addition."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_comment("This is a comment")

        assert "# This is a comment" in asw.lines

    def test_add_blank_line(self):
        """Test blank line addition."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_blank_line()

        assert "" in asw.lines


class TestSALGEBNamelist:
    """Test SALGEB namelist generation."""

    def test_basic_salgeb(self):
        """Test basic SALGEB namelist."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_salgeb(CUP="LS", RAD="E1")

        content = asw.get_content()
        assert "&SALGEB CUP='LS' RAD='E1'" in content
        assert "&END" in content

    def test_salgeb_with_run(self):
        """Test SALGEB with RUN parameter."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_salgeb(CUP="IC", RAD="  ", RUN="PI")

        content = asw.get_content()
        assert "RUN='PI'" in content

    def test_salgeb_with_mxconf(self):
        """Test SALGEB with MXCONF parameter."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_salgeb(CUP="LS", RAD="E1", MXCONF=5, MXVORB=3)

        content = asw.get_content()
        assert "MXCONF=5" in content
        assert "MXVORB=3" in content

    def test_salgeb_with_mxccf(self):
        """Test SALGEB with MXCCF for autoionization."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_salgeb(CUP="IC", RAD="  ", RUN="DR", MXCCF=10)

        content = asw.get_content()
        assert "MXCCF=10" in content

    def test_salgeb_with_kwargs(self):
        """Test SALGEB with additional parameters."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_salgeb(CUP="LS", RAD="E1", KCOR1=1, KCOR2=1, NAST=3)

        content = asw.get_content()
        assert "KCOR1=1" in content
        assert "KCOR2=1" in content
        assert "NAST=3" in content

    def test_salgeb_with_core_specification(self):
        """Test SALGEB with explicit core specification."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with core")
        asw.add_salgeb(CUP="IC", RAD="E1", KCOR1=1, KCOR2=3)

        content = asw.get_content()
        assert "KCOR1=1" in content
        assert "KCOR2=3" in content
        # Ne-like core (1s, 2s, 2p)

    def test_salgeb_with_korb_alternative(self):
        """Test SALGEB with KORB alternative for core."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with KORB")
        asw.add_salgeb(CUP="LS", RAD="E1", KORB1=1, KORB2=2)

        content = asw.get_content()
        assert "KORB1=1" in content
        assert "KORB2=2" in content

    def test_salgeb_with_auger_control(self):
        """Test SALGEB with AUGER parameter."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with AUGER")
        asw.add_salgeb(RUN="PI", CUP="LS", AUGER="NO")

        content = asw.get_content()
        assert "AUGER='NO'" in content

    def test_salgeb_with_born(self):
        """Test SALGEB with Born collision strengths."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with Born")
        asw.add_salgeb(CUP="IC", RAD="ALL", BORN="INF")

        content = asw.get_content()
        assert "BORN='INF'" in content

    def test_salgeb_with_kutss_off(self):
        """Test SALGEB with spin-spin interactions disabled."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with KUTSS=-1")
        # KUTSS=-1 for LS coupling (no fine-structure in spin-spin)
        asw.add_salgeb(CUP="LS", RAD="E1", KUTSS=-1)

        content = asw.get_content()
        assert "KUTSS=-1" in content

    def test_salgeb_with_kutss_perturbative(self):
        """Test SALGEB with perturbative fine-structure."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with KUTSS=0")
        # KUTSS=0 for perturbative correction (default)
        asw.add_salgeb(CUP="IC", RAD="E1", KUTSS=0)

        content = asw.get_content()
        assert "KUTSS=0" in content

    def test_salgeb_with_kutss_full(self):
        """Test SALGEB with full fine-structure in matrix."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with KUTSS=1")
        # KUTSS=1 for fully included spin-spin (high precision)
        asw.add_salgeb(CUP="IC", RAD="E1", KUTSS=1, KCOR1=1, KCOR2=2)

        content = asw.get_content()
        assert "KUTSS=1" in content
        assert "KCOR1=1" in content

    def test_salgeb_with_all_fine_structure(self):
        """Test SALGEB with all fine-structure parameters."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with complete fine-structure")
        # Heavy element calculation with all fine-structure
        asw.add_salgeb(
            CUP="IC", 
            RAD="E1",
            KUTSS=1,  # spin-spin
            KUTSO=1,  # spin-orbit
            KUTOO=1,  # orbit-orbit
            KCOR1=1,
            KCOR2=3
        )

        content = asw.get_content()
        assert "KUTSS=1" in content
        assert "KUTSO=1" in content
        assert "KUTOO=1" in content

    def test_salgeb_with_direct_integration(self):
        """Test SALGEB with direct integration fine-structure."""
        asw = ASWriter("test.dat")
        asw.write_header("Test with KUTSS=2")
        # KUTSS=2 for direct integration (most accurate)
        asw.add_salgeb(CUP="IC", RAD="E1", KUTSS=2, KUTSO=2)

        content = asw.get_content()
        assert "KUTSS=2" in content
        assert "KUTSO=2" in content


class TestSMINIMNamelist:
    """Test SMINIM namelist generation."""

    def test_basic_sminim(self):
        """Test basic SMINIM namelist."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_sminim(NZION=26)

        content = asw.get_content()
        assert "&SMINIM NZION=26 &END" in content

    def test_sminim_with_optimization(self):
        """Test SMINIM with lambda optimization parameters."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_sminim(NZION=26, INCLUD=3, NLAM=3, NVAR=2)

        content = asw.get_content()
        assert "NZION=26" in content
        assert "INCLUD=3" in content
        assert "NLAM=3" in content
        assert "NVAR=2" in content

    def test_sminim_with_kwargs(self):
        """Test SMINIM with additional parameters."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_sminim(NZION=6, NPRN=1)

        content = asw.get_content()
        assert "NPRN=1" in content


class TestSRADCONNamelist:
    """Test SRADCON namelist generation."""

    def test_basic_sradcon(self):
        """Test basic SRADCON namelist."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_sradcon(MENG=-15, EMIN=0.0, EMAX=1000.0)

        content = asw.get_content()
        assert "&SRADCON MENG=-15 EMIN=0.0 EMAX=1000.0 &END" in content

    def test_sradcon_default(self):
        """Test SRADCON with defaults."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_sradcon()

        content = asw.get_content()
        assert "&SRADCON" in content
        assert "&END" in content


class TestDRRNamelist:
    """Test DRR namelist generation."""

    def test_basic_drr(self):
        """Test basic DRR namelist."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_drr(NMIN=3, NMAX=15, LMIN=0, LMAX=7)

        content = asw.get_content()
        assert "&DRR NMIN=3 NMAX=15 LMIN=0 LMAX=7 &END" in content

    def test_drr_with_nmesh(self):
        """Test DRR with NMESH parameter."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_drr(NMIN=3, NMAX=10, LMIN=0, LMAX=5, NMESH=-1)

        content = asw.get_content()
        assert "NMESH=-1" in content


class TestManualConfiguration:
    """Test manual configuration input."""

    def test_add_orbitals(self):
        """Test manual orbital definition."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_orbitals([(1, 0), (2, 0), (2, 1)])

        content = asw.get_content()
        assert "1 0  2 0  2 1" in content

    def test_add_configurations(self):
        """Test manual configuration addition."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_orbitals([(1, 0), (2, 0), (2, 1)])
        asw.add_configurations([[2, 2, 0], [2, 1, 1], [2, 0, 2]])

        content = asw.get_content()
        assert " 2   2   0" in content
        assert " 2   1   1" in content
        assert " 2   0   2" in content


class TestConfigsFromAtomkit:
    """Test automatic conversion from atomkit Configuration objects."""

    def test_basic_conversion(self):
        """Test basic configuration conversion."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")

        ground = Configuration.from_string("1s2.2s2.2p6")
        info = asw.configs_from_atomkit([ground], auto_detect_core=False)

        assert info["n_configs"] == 1
        assert info["n_orbitals"] == 3
        assert (1, 0) in asw.orbitals  # 1s
        assert (2, 0) in asw.orbitals  # 2s
        assert (2, 1) in asw.orbitals  # 2p

    def test_conversion_with_core(self):
        """Test conversion with core orbital specification."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")

        ground = Configuration.from_string("1s2.2s2.2p6")
        excited = Configuration.from_string("1s2.2s2.2p5.3s1")

        info = asw.configs_from_atomkit([ground, excited], last_core_orbital="1s")

        assert "core_orbitals" in info
        assert "1s" in info["core_orbitals"]
        assert "valence_orbitals" in info
        assert "2s" in info["valence_orbitals"]
        assert "2p" in info["valence_orbitals"]

    def test_conversion_multiple_configs(self):
        """Test conversion of multiple configurations."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")

        ground = Configuration.from_string("1s2.2s2")
        excited1 = Configuration.from_string("1s2.2s1.2p1")
        excited2 = Configuration.from_string("1s2.2p2")

        info = asw.configs_from_atomkit([ground, excited1, excited2])

        assert info["n_configs"] == 3
        assert len(asw.configurations) == 3

    def test_conversion_with_auto_mxconf(self):
        """Test that MXCONF is automatically set."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")
        asw.add_salgeb(CUP="LS", RAD="E1")

        ground = Configuration.from_string("1s2.2s2")
        excited = Configuration.from_string("1s2.2s1.3s1")

        asw.configs_from_atomkit([ground, excited])

        content = asw.get_content()
        assert "MXCONF=2" in content
        assert "MXVORB=" in content


class TestOrbitalLabel:
    """Test orbital label generation."""

    def test_orbital_label_s(self):
        """Test s orbital label."""
        asw = ASWriter("test.dat")
        label = asw._orbital_label(2, 0)
        assert label == "2s"

    def test_orbital_label_p(self):
        """Test p orbital label."""
        asw = ASWriter("test.dat")
        label = asw._orbital_label(3, 1)
        assert label == "3p"

    def test_orbital_label_d(self):
        """Test d orbital label."""
        asw = ASWriter("test.dat")
        label = asw._orbital_label(3, 2)
        assert label == "3d"

    def test_orbital_label_f(self):
        """Test f orbital label."""
        asw = ASWriter("test.dat")
        label = asw._orbital_label(4, 3)
        assert label == "4f"

    def test_orbital_label_high_l(self):
        """Test high l orbital label."""
        asw = ASWriter("test.dat")
        # l=10 maps to 'n' in L_QUANTUM_MAP (goes up to l=20)
        label = asw._orbital_label(5, 10)
        assert label == "5n"

        # Test truly high l (beyond L_QUANTUM_MAP)
        label_very_high = asw._orbital_label(5, 100)
        assert label_very_high == "5[l=100]"


class TestFullWorkflows:
    """Test complete workflow examples."""

    def test_basic_structure_calculation(self):
        """Test basic structure calculation workflow."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".dat", delete=False) as f:
            temp_file = f.name

        try:
            ground = Configuration.from_element("C", ion_charge=2)
            excited = ground.generate_excitations(["3s", "3p"], excitation_level=1)

            with ASWriter(temp_file) as asw:
                asw.write_header("C Be-like structure")
                asw.add_salgeb(CUP="IC", RAD="E1")
                info = asw.configs_from_atomkit(
                    [ground] + excited, last_core_orbital="1s"
                )
                asw.add_sminim(NZION=6)

            content = Path(temp_file).read_text()
            assert "A.S. C Be-like structure" in content
            assert "&SALGEB" in content
            assert "&SMINIM" in content
            assert "NZION=6" in content
            assert info["n_configs"] > 1
        finally:
            Path(temp_file).unlink()

    def test_optimization_workflow(self):
        """Test orbital optimization workflow."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".dat", delete=False) as f:
            temp_file = f.name

        try:
            ground = Configuration.from_element("Fe", ion_charge=24)
            excited = ground.generate_excitations(["3s"], excitation_level=1)

            with ASWriter(temp_file) as asw:
                asw.write_header("Fe optimization")
                asw.add_salgeb(CUP="LS", RAD="E1")
                asw.configs_from_atomkit([ground] + excited[:1], last_core_orbital="1s")
                asw.add_sminim(NZION=26, INCLUD=2, NLAM=2, NVAR=1)

            content = Path(temp_file).read_text()
            assert "NLAM=2" in content
            assert "NVAR=1" in content
            assert "INCLUD=2" in content
        finally:
            Path(temp_file).unlink()

    def test_photoionization_workflow(self):
        """Test photoionization workflow."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".dat", delete=False) as f:
            temp_file = f.name

        try:
            target = Configuration.from_string("1s2")
            initial = Configuration.from_string("1s2.2s1")

            with ASWriter(temp_file) as asw:
                asw.write_header("Photoionization test")
                asw.add_salgeb(RUN="PI", CUP="LS", RAD="  ")
                asw.configs_from_atomkit([target])
                asw.add_blank_line()
                asw.configs_from_atomkit([initial])
                asw.add_sminim(NZION=6)
                asw.add_sradcon(MENG=-15, EMIN=0.0, EMAX=100.0)

            content = Path(temp_file).read_text()
            assert "RUN='PI'" in content
            assert "&SRADCON" in content
            assert "EMIN=0.0" in content
        finally:
            Path(temp_file).unlink()

    def test_dr_workflow(self):
        """Test dielectronic recombination workflow."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".dat", delete=False) as f:
            temp_file = f.name

        try:
            target = Configuration.from_string("1s2")
            autoion = Configuration.from_string("1s1.2s2")

            with ASWriter(temp_file) as asw:
                asw.write_header("DR test")
                asw.add_salgeb(RUN="DR", CUP="IC", RAD="  ", MXCCF=1)
                asw.configs_from_atomkit([target])
                asw.add_blank_line()
                asw.configs_from_atomkit([autoion])
                asw.add_drr(NMIN=3, NMAX=10, LMIN=0, LMAX=5)
                asw.add_sminim(NZION=6)
                asw.add_sradcon(MENG=-10, EMIN=0.0, EMAX=20.0)

            content = Path(temp_file).read_text()
            assert "RUN='DR'" in content
            assert "MXCCF=1" in content
            assert "&DRR" in content
            assert "NMIN=3" in content
        finally:
            Path(temp_file).unlink()


class TestEdgeCases:
    """Test edge cases and error handling."""

    def test_empty_configuration_list(self):
        """Test handling of empty configuration list."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")

        with pytest.raises(ValueError, match="Must provide at least one configuration"):
            asw.configs_from_atomkit([])

    def test_shell_import_error(self):
        """Test error when Shell class unavailable and core parsing needed."""
        asw = ASWriter("test.dat")
        asw.write_header("Test")

        # This should work without Shell since no core is specified
        ground = Configuration.from_string("1s2.2s2")
        info = asw.configs_from_atomkit([ground], last_core_orbital=None)
        assert info["n_configs"] == 1


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
